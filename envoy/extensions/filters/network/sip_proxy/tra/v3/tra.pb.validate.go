// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: envoy/extensions/filters/network/sip_proxy/tra/v3/tra.proto

package envoy_extensions_filters_network_sip_proxy_tra_v3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = v3.ApiVersion(0)
)

// Validate checks the field values on TraServiceConfig with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TraServiceConfig) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGrpcService() == nil {
		return TraServiceConfigValidationError{
			field:  "GrpcService",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGrpcService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TraServiceConfigValidationError{
				field:  "GrpcService",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := v3.ApiVersion_name[int32(m.GetTransportApiVersion())]; !ok {
		return TraServiceConfigValidationError{
			field:  "TransportApiVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TraServiceConfigValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TraServiceConfigValidationError is the validation error returned by
// TraServiceConfig.Validate if the designated constraints aren't met.
type TraServiceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TraServiceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TraServiceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TraServiceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TraServiceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TraServiceConfigValidationError) ErrorName() string { return "TraServiceConfigValidationError" }

// Error satisfies the builtin error interface
func (e TraServiceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTraServiceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TraServiceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TraServiceConfigValidationError{}

// Validate checks the field values on TraServiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TraServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Request.(type) {

	case *TraServiceRequest_UpdateLskpmcRequest:

		if v, ok := interface{}(m.GetUpdateLskpmcRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceRequestValidationError{
					field:  "UpdateLskpmcRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceRequest_GetIpFromLskpmcRequest:

		if v, ok := interface{}(m.GetGetIpFromLskpmcRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceRequestValidationError{
					field:  "GetIpFromLskpmcRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceRequest_SubscribeRequest:

		if v, ok := interface{}(m.GetSubscribeRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceRequestValidationError{
					field:  "SubscribeRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TraServiceRequestValidationError is the validation error returned by
// TraServiceRequest.Validate if the designated constraints aren't met.
type TraServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TraServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TraServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TraServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TraServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TraServiceRequestValidationError) ErrorName() string {
	return "TraServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TraServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTraServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TraServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TraServiceRequestValidationError{}

// Validate checks the field values on TraServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TraServiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Response.(type) {

	case *TraServiceResponse_UpdateLskpmcResponse:

		if v, ok := interface{}(m.GetUpdateLskpmcResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceResponseValidationError{
					field:  "UpdateLskpmcResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceResponse_GetIpFromLskpmcResponse:

		if v, ok := interface{}(m.GetGetIpFromLskpmcResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceResponseValidationError{
					field:  "GetIpFromLskpmcResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceResponse_SubscribeResponse:

		if v, ok := interface{}(m.GetSubscribeResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceResponseValidationError{
					field:  "SubscribeResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TraServiceResponseValidationError is the validation error returned by
// TraServiceResponse.Validate if the designated constraints aren't met.
type TraServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TraServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TraServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TraServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TraServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TraServiceResponseValidationError) ErrorName() string {
	return "TraServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TraServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTraServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TraServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TraServiceResponseValidationError{}

// Validate checks the field values on UpdateLskpmcRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLskpmcRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLskpmc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLskpmcRequestValidationError{
				field:  "Lskpmc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateLskpmcRequestValidationError is the validation error returned by
// UpdateLskpmcRequest.Validate if the designated constraints aren't met.
type UpdateLskpmcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLskpmcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLskpmcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLskpmcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLskpmcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLskpmcRequestValidationError) ErrorName() string {
	return "UpdateLskpmcRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLskpmcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLskpmcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLskpmcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLskpmcRequestValidationError{}

// Validate checks the field values on UpdateLskpmcResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLskpmcResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ret

	return nil
}

// UpdateLskpmcResponseValidationError is the validation error returned by
// UpdateLskpmcResponse.Validate if the designated constraints aren't met.
type UpdateLskpmcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLskpmcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLskpmcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLskpmcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLskpmcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLskpmcResponseValidationError) ErrorName() string {
	return "UpdateLskpmcResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLskpmcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLskpmcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLskpmcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLskpmcResponseValidationError{}

// Validate checks the field values on GetIpFromLskpmcRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetIpFromLskpmcRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	return nil
}

// GetIpFromLskpmcRequestValidationError is the validation error returned by
// GetIpFromLskpmcRequest.Validate if the designated constraints aren't met.
type GetIpFromLskpmcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIpFromLskpmcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIpFromLskpmcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIpFromLskpmcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIpFromLskpmcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIpFromLskpmcRequestValidationError) ErrorName() string {
	return "GetIpFromLskpmcRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIpFromLskpmcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIpFromLskpmcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIpFromLskpmcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIpFromLskpmcRequestValidationError{}

// Validate checks the field values on GetIpFromLskpmcResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetIpFromLskpmcResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ip

	return nil
}

// GetIpFromLskpmcResponseValidationError is the validation error returned by
// GetIpFromLskpmcResponse.Validate if the designated constraints aren't met.
type GetIpFromLskpmcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIpFromLskpmcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIpFromLskpmcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIpFromLskpmcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIpFromLskpmcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIpFromLskpmcResponseValidationError) ErrorName() string {
	return "GetIpFromLskpmcResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIpFromLskpmcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIpFromLskpmcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIpFromLskpmcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIpFromLskpmcResponseValidationError{}

// Validate checks the field values on SubscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SubscribeRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SubscribeRequestValidationError is the validation error returned by
// SubscribeRequest.Validate if the designated constraints aren't met.
type SubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRequestValidationError) ErrorName() string { return "SubscribeRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRequestValidationError{}

// Validate checks the field values on SubscribeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SubscribeResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLskpmcs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubscribeResponseValidationError{
					field:  fmt.Sprintf("Lskpmcs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SubscribeResponseValidationError is the validation error returned by
// SubscribeResponse.Validate if the designated constraints aren't met.
type SubscribeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeResponseValidationError) ErrorName() string {
	return "SubscribeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeResponseValidationError{}

// Validate checks the field values on Lskpmc with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Lskpmc) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Val

	return nil
}

// LskpmcValidationError is the validation error returned by Lskpmc.Validate if
// the designated constraints aren't met.
type LskpmcValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LskpmcValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LskpmcValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LskpmcValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LskpmcValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LskpmcValidationError) ErrorName() string { return "LskpmcValidationError" }

// Error satisfies the builtin error interface
func (e LskpmcValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLskpmc.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LskpmcValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LskpmcValidationError{}
