// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: envoy/extensions/filters/network/sip_proxy/tra/v3/tra.proto

package envoy_extensions_filters_network_sip_proxy_tra_v3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	v3 "github.com/durd07/go-control-plane/envoy/config/core/v3"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = v3.ApiVersion(0)
)

// Validate checks the field values on TraServiceConfig with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TraServiceConfig) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGrpcService() == nil {
		return TraServiceConfigValidationError{
			field:  "GrpcService",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGrpcService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TraServiceConfigValidationError{
				field:  "GrpcService",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := v3.ApiVersion_name[int32(m.GetTransportApiVersion())]; !ok {
		return TraServiceConfigValidationError{
			field:  "TransportApiVersion",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TraServiceConfigValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TraServiceConfigValidationError is the validation error returned by
// TraServiceConfig.Validate if the designated constraints aren't met.
type TraServiceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TraServiceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TraServiceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TraServiceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TraServiceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TraServiceConfigValidationError) ErrorName() string { return "TraServiceConfigValidationError" }

// Error satisfies the builtin error interface
func (e TraServiceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTraServiceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TraServiceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TraServiceConfigValidationError{}

// Validate checks the field values on TraServiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TraServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Request.(type) {

	case *TraServiceRequest_CreateLskpmcRequest:

		if v, ok := interface{}(m.GetCreateLskpmcRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceRequestValidationError{
					field:  "CreateLskpmcRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceRequest_UpdateLskpmcRequest:

		if v, ok := interface{}(m.GetUpdateLskpmcRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceRequestValidationError{
					field:  "UpdateLskpmcRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceRequest_RetrieveLskpmcRequest:

		if v, ok := interface{}(m.GetRetrieveLskpmcRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceRequestValidationError{
					field:  "RetrieveLskpmcRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceRequest_DeleteLskpmcRequest:

		if v, ok := interface{}(m.GetDeleteLskpmcRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceRequestValidationError{
					field:  "DeleteLskpmcRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceRequest_SubscribeLskpmcRequest:

		if v, ok := interface{}(m.GetSubscribeLskpmcRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceRequestValidationError{
					field:  "SubscribeLskpmcRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceRequest_CreateXafiRequest:

		if v, ok := interface{}(m.GetCreateXafiRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceRequestValidationError{
					field:  "CreateXafiRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceRequest_UpdateXafiRequest:

		if v, ok := interface{}(m.GetUpdateXafiRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceRequestValidationError{
					field:  "UpdateXafiRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceRequest_RetrieveXafiRequest:

		if v, ok := interface{}(m.GetRetrieveXafiRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceRequestValidationError{
					field:  "RetrieveXafiRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceRequest_DeleteXafiRequest:

		if v, ok := interface{}(m.GetDeleteXafiRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceRequestValidationError{
					field:  "DeleteXafiRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceRequest_SubscribeXafiRequest:

		if v, ok := interface{}(m.GetSubscribeXafiRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceRequestValidationError{
					field:  "SubscribeXafiRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TraServiceRequestValidationError is the validation error returned by
// TraServiceRequest.Validate if the designated constraints aren't met.
type TraServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TraServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TraServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TraServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TraServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TraServiceRequestValidationError) ErrorName() string {
	return "TraServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TraServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTraServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TraServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TraServiceRequestValidationError{}

// Validate checks the field values on TraServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TraServiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ret

	// no validation rules for Reason

	switch m.Response.(type) {

	case *TraServiceResponse_CreateLskpmcResponse:

		if v, ok := interface{}(m.GetCreateLskpmcResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceResponseValidationError{
					field:  "CreateLskpmcResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceResponse_UpdateLskpmcResponse:

		if v, ok := interface{}(m.GetUpdateLskpmcResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceResponseValidationError{
					field:  "UpdateLskpmcResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceResponse_RetrieveLskpmcResponse:

		if v, ok := interface{}(m.GetRetrieveLskpmcResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceResponseValidationError{
					field:  "RetrieveLskpmcResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceResponse_DeleteLskpmcResponse:

		if v, ok := interface{}(m.GetDeleteLskpmcResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceResponseValidationError{
					field:  "DeleteLskpmcResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceResponse_SubscribeLskpmcResponse:

		if v, ok := interface{}(m.GetSubscribeLskpmcResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceResponseValidationError{
					field:  "SubscribeLskpmcResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceResponse_CreateXafiResponse:

		if v, ok := interface{}(m.GetCreateXafiResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceResponseValidationError{
					field:  "CreateXafiResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceResponse_UpdateXafiResponse:

		if v, ok := interface{}(m.GetUpdateXafiResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceResponseValidationError{
					field:  "UpdateXafiResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceResponse_RetrieveXafiResponse:

		if v, ok := interface{}(m.GetRetrieveXafiResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceResponseValidationError{
					field:  "RetrieveXafiResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceResponse_DeleteXafiResponse:

		if v, ok := interface{}(m.GetDeleteXafiResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceResponseValidationError{
					field:  "DeleteXafiResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TraServiceResponse_SubscribeXafiResponse:

		if v, ok := interface{}(m.GetSubscribeXafiResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraServiceResponseValidationError{
					field:  "SubscribeXafiResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TraServiceResponseValidationError is the validation error returned by
// TraServiceResponse.Validate if the designated constraints aren't met.
type TraServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TraServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TraServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TraServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TraServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TraServiceResponseValidationError) ErrorName() string {
	return "TraServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TraServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTraServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TraServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TraServiceResponseValidationError{}

// Validate checks the field values on CreateLskpmcRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateLskpmcRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Lskpmcs

	return nil
}

// CreateLskpmcRequestValidationError is the validation error returned by
// CreateLskpmcRequest.Validate if the designated constraints aren't met.
type CreateLskpmcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLskpmcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLskpmcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLskpmcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLskpmcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLskpmcRequestValidationError) ErrorName() string {
	return "CreateLskpmcRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLskpmcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLskpmcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLskpmcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLskpmcRequestValidationError{}

// Validate checks the field values on CreateLskpmcResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateLskpmcResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateLskpmcResponseValidationError is the validation error returned by
// CreateLskpmcResponse.Validate if the designated constraints aren't met.
type CreateLskpmcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLskpmcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLskpmcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLskpmcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLskpmcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLskpmcResponseValidationError) ErrorName() string {
	return "CreateLskpmcResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLskpmcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLskpmcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLskpmcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLskpmcResponseValidationError{}

// Validate checks the field values on UpdateLskpmcRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLskpmcRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Lskpmcs

	return nil
}

// UpdateLskpmcRequestValidationError is the validation error returned by
// UpdateLskpmcRequest.Validate if the designated constraints aren't met.
type UpdateLskpmcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLskpmcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLskpmcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLskpmcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLskpmcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLskpmcRequestValidationError) ErrorName() string {
	return "UpdateLskpmcRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLskpmcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLskpmcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLskpmcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLskpmcRequestValidationError{}

// Validate checks the field values on UpdateLskpmcResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLskpmcResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateLskpmcResponseValidationError is the validation error returned by
// UpdateLskpmcResponse.Validate if the designated constraints aren't met.
type UpdateLskpmcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLskpmcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLskpmcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLskpmcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLskpmcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLskpmcResponseValidationError) ErrorName() string {
	return "UpdateLskpmcResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLskpmcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLskpmcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLskpmcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLskpmcResponseValidationError{}

// Validate checks the field values on RetrieveLskpmcRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveLskpmcRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Lskpmc

	return nil
}

// RetrieveLskpmcRequestValidationError is the validation error returned by
// RetrieveLskpmcRequest.Validate if the designated constraints aren't met.
type RetrieveLskpmcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveLskpmcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveLskpmcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveLskpmcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveLskpmcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveLskpmcRequestValidationError) ErrorName() string {
	return "RetrieveLskpmcRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveLskpmcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveLskpmcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveLskpmcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveLskpmcRequestValidationError{}

// Validate checks the field values on RetrieveLskpmcResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveLskpmcResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Lskpmcs

	return nil
}

// RetrieveLskpmcResponseValidationError is the validation error returned by
// RetrieveLskpmcResponse.Validate if the designated constraints aren't met.
type RetrieveLskpmcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveLskpmcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveLskpmcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveLskpmcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveLskpmcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveLskpmcResponseValidationError) ErrorName() string {
	return "RetrieveLskpmcResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveLskpmcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveLskpmcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveLskpmcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveLskpmcResponseValidationError{}

// Validate checks the field values on DeleteLskpmcRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteLskpmcRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Lskpmc

	return nil
}

// DeleteLskpmcRequestValidationError is the validation error returned by
// DeleteLskpmcRequest.Validate if the designated constraints aren't met.
type DeleteLskpmcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLskpmcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLskpmcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLskpmcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLskpmcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLskpmcRequestValidationError) ErrorName() string {
	return "DeleteLskpmcRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLskpmcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLskpmcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLskpmcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLskpmcRequestValidationError{}

// Validate checks the field values on DeleteLskpmcResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteLskpmcResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteLskpmcResponseValidationError is the validation error returned by
// DeleteLskpmcResponse.Validate if the designated constraints aren't met.
type DeleteLskpmcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLskpmcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLskpmcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLskpmcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLskpmcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLskpmcResponseValidationError) ErrorName() string {
	return "DeleteLskpmcResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLskpmcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLskpmcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLskpmcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLskpmcResponseValidationError{}

// Validate checks the field values on SubscribeLskpmcRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubscribeLskpmcRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SubscribeLskpmcRequestValidationError is the validation error returned by
// SubscribeLskpmcRequest.Validate if the designated constraints aren't met.
type SubscribeLskpmcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeLskpmcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeLskpmcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeLskpmcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeLskpmcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeLskpmcRequestValidationError) ErrorName() string {
	return "SubscribeLskpmcRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeLskpmcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeLskpmcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeLskpmcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeLskpmcRequestValidationError{}

// Validate checks the field values on SubscribeLskpmcResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubscribeLskpmcResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Lskpmcs

	return nil
}

// SubscribeLskpmcResponseValidationError is the validation error returned by
// SubscribeLskpmcResponse.Validate if the designated constraints aren't met.
type SubscribeLskpmcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeLskpmcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeLskpmcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeLskpmcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeLskpmcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeLskpmcResponseValidationError) ErrorName() string {
	return "SubscribeLskpmcResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeLskpmcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeLskpmcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeLskpmcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeLskpmcResponseValidationError{}

// Validate checks the field values on CreateXafiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateXafiRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Xafis

	return nil
}

// CreateXafiRequestValidationError is the validation error returned by
// CreateXafiRequest.Validate if the designated constraints aren't met.
type CreateXafiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateXafiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateXafiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateXafiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateXafiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateXafiRequestValidationError) ErrorName() string {
	return "CreateXafiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateXafiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateXafiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateXafiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateXafiRequestValidationError{}

// Validate checks the field values on CreateXafiResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateXafiResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateXafiResponseValidationError is the validation error returned by
// CreateXafiResponse.Validate if the designated constraints aren't met.
type CreateXafiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateXafiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateXafiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateXafiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateXafiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateXafiResponseValidationError) ErrorName() string {
	return "CreateXafiResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateXafiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateXafiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateXafiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateXafiResponseValidationError{}

// Validate checks the field values on UpdateXafiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateXafiRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Xafis

	return nil
}

// UpdateXafiRequestValidationError is the validation error returned by
// UpdateXafiRequest.Validate if the designated constraints aren't met.
type UpdateXafiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateXafiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateXafiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateXafiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateXafiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateXafiRequestValidationError) ErrorName() string {
	return "UpdateXafiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateXafiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateXafiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateXafiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateXafiRequestValidationError{}

// Validate checks the field values on UpdateXafiResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateXafiResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateXafiResponseValidationError is the validation error returned by
// UpdateXafiResponse.Validate if the designated constraints aren't met.
type UpdateXafiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateXafiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateXafiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateXafiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateXafiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateXafiResponseValidationError) ErrorName() string {
	return "UpdateXafiResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateXafiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateXafiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateXafiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateXafiResponseValidationError{}

// Validate checks the field values on RetrieveXafiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveXafiRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Xafi

	return nil
}

// RetrieveXafiRequestValidationError is the validation error returned by
// RetrieveXafiRequest.Validate if the designated constraints aren't met.
type RetrieveXafiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveXafiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveXafiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveXafiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveXafiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveXafiRequestValidationError) ErrorName() string {
	return "RetrieveXafiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveXafiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveXafiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveXafiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveXafiRequestValidationError{}

// Validate checks the field values on RetrieveXafiResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RetrieveXafiResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Xafis

	return nil
}

// RetrieveXafiResponseValidationError is the validation error returned by
// RetrieveXafiResponse.Validate if the designated constraints aren't met.
type RetrieveXafiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveXafiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveXafiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveXafiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveXafiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveXafiResponseValidationError) ErrorName() string {
	return "RetrieveXafiResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveXafiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveXafiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveXafiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveXafiResponseValidationError{}

// Validate checks the field values on DeleteXafiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteXafiRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Xafi

	return nil
}

// DeleteXafiRequestValidationError is the validation error returned by
// DeleteXafiRequest.Validate if the designated constraints aren't met.
type DeleteXafiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteXafiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteXafiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteXafiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteXafiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteXafiRequestValidationError) ErrorName() string {
	return "DeleteXafiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteXafiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteXafiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteXafiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteXafiRequestValidationError{}

// Validate checks the field values on DeleteXafiResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteXafiResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteXafiResponseValidationError is the validation error returned by
// DeleteXafiResponse.Validate if the designated constraints aren't met.
type DeleteXafiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteXafiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteXafiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteXafiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteXafiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteXafiResponseValidationError) ErrorName() string {
	return "DeleteXafiResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteXafiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteXafiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteXafiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteXafiResponseValidationError{}

// Validate checks the field values on SubscribeXafiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubscribeXafiRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SubscribeXafiRequestValidationError is the validation error returned by
// SubscribeXafiRequest.Validate if the designated constraints aren't met.
type SubscribeXafiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeXafiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeXafiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeXafiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeXafiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeXafiRequestValidationError) ErrorName() string {
	return "SubscribeXafiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeXafiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeXafiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeXafiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeXafiRequestValidationError{}

// Validate checks the field values on SubscribeXafiResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubscribeXafiResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Xafis

	return nil
}

// SubscribeXafiResponseValidationError is the validation error returned by
// SubscribeXafiResponse.Validate if the designated constraints aren't met.
type SubscribeXafiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeXafiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeXafiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeXafiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeXafiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeXafiResponseValidationError) ErrorName() string {
	return "SubscribeXafiResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeXafiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeXafiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeXafiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeXafiResponseValidationError{}
