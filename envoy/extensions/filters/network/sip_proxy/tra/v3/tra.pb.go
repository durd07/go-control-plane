// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: envoy/extensions/filters/network/sip_proxy/tra/v3/tra.proto

package envoy_extensions_filters_network_sip_proxy_tra_v3

import (
	_ "github.com/cncf/xds/go/udpa/annotations"
	v3 "github.com/durd07/go-control-plane/envoy/config/core/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TraServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the gRPC service that hosts the rate limit service. The client
	// will connect to this cluster when it needs to make rate limit service
	// requests.
	GrpcService *v3.GrpcService `protobuf:"bytes,1,opt,name=grpc_service,json=grpcService,proto3" json:"grpc_service,omitempty"`
	// API version for rate limit transport protocol. This describes the rate limit gRPC endpoint and
	// version of messages used on the wire.
	TransportApiVersion v3.ApiVersion      `protobuf:"varint,2,opt,name=transport_api_version,json=transportApiVersion,proto3,enum=envoy.config.core.v3.ApiVersion" json:"transport_api_version,omitempty"`
	Timeout             *duration.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *TraServiceConfig) Reset() {
	*x = TraServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraServiceConfig) ProtoMessage() {}

func (x *TraServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraServiceConfig.ProtoReflect.Descriptor instead.
func (*TraServiceConfig) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{0}
}

func (x *TraServiceConfig) GetGrpcService() *v3.GrpcService {
	if x != nil {
		return x.GrpcService
	}
	return nil
}

func (x *TraServiceConfig) GetTransportApiVersion() v3.ApiVersion {
	if x != nil {
		return x.TransportApiVersion
	}
	return v3.ApiVersion_AUTO
}

func (x *TraServiceConfig) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type TraServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*TraServiceRequest_CreateLskpmcRequest
	//	*TraServiceRequest_UpdateLskpmcRequest
	//	*TraServiceRequest_RetrieveLskpmcRequest
	//	*TraServiceRequest_DeleteLskpmcRequest
	//	*TraServiceRequest_SubscribeLskpmcRequest
	//	*TraServiceRequest_CreateXafiRequest
	//	*TraServiceRequest_UpdateXafiRequest
	//	*TraServiceRequest_RetrieveXafiRequest
	//	*TraServiceRequest_DeleteXafiRequest
	//	*TraServiceRequest_SubscribeXafiRequest
	Request isTraServiceRequest_Request `protobuf_oneof:"request"`
}

func (x *TraServiceRequest) Reset() {
	*x = TraServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraServiceRequest) ProtoMessage() {}

func (x *TraServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraServiceRequest.ProtoReflect.Descriptor instead.
func (*TraServiceRequest) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{1}
}

func (m *TraServiceRequest) GetRequest() isTraServiceRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *TraServiceRequest) GetCreateLskpmcRequest() *CreateLskpmcRequest {
	if x, ok := x.GetRequest().(*TraServiceRequest_CreateLskpmcRequest); ok {
		return x.CreateLskpmcRequest
	}
	return nil
}

func (x *TraServiceRequest) GetUpdateLskpmcRequest() *UpdateLskpmcRequest {
	if x, ok := x.GetRequest().(*TraServiceRequest_UpdateLskpmcRequest); ok {
		return x.UpdateLskpmcRequest
	}
	return nil
}

func (x *TraServiceRequest) GetRetrieveLskpmcRequest() *RetrieveLskpmcRequest {
	if x, ok := x.GetRequest().(*TraServiceRequest_RetrieveLskpmcRequest); ok {
		return x.RetrieveLskpmcRequest
	}
	return nil
}

func (x *TraServiceRequest) GetDeleteLskpmcRequest() *DeleteLskpmcRequest {
	if x, ok := x.GetRequest().(*TraServiceRequest_DeleteLskpmcRequest); ok {
		return x.DeleteLskpmcRequest
	}
	return nil
}

func (x *TraServiceRequest) GetSubscribeLskpmcRequest() *SubscribeLskpmcRequest {
	if x, ok := x.GetRequest().(*TraServiceRequest_SubscribeLskpmcRequest); ok {
		return x.SubscribeLskpmcRequest
	}
	return nil
}

func (x *TraServiceRequest) GetCreateXafiRequest() *CreateXafiRequest {
	if x, ok := x.GetRequest().(*TraServiceRequest_CreateXafiRequest); ok {
		return x.CreateXafiRequest
	}
	return nil
}

func (x *TraServiceRequest) GetUpdateXafiRequest() *UpdateXafiRequest {
	if x, ok := x.GetRequest().(*TraServiceRequest_UpdateXafiRequest); ok {
		return x.UpdateXafiRequest
	}
	return nil
}

func (x *TraServiceRequest) GetRetrieveXafiRequest() *RetrieveXafiRequest {
	if x, ok := x.GetRequest().(*TraServiceRequest_RetrieveXafiRequest); ok {
		return x.RetrieveXafiRequest
	}
	return nil
}

func (x *TraServiceRequest) GetDeleteXafiRequest() *DeleteXafiRequest {
	if x, ok := x.GetRequest().(*TraServiceRequest_DeleteXafiRequest); ok {
		return x.DeleteXafiRequest
	}
	return nil
}

func (x *TraServiceRequest) GetSubscribeXafiRequest() *SubscribeXafiRequest {
	if x, ok := x.GetRequest().(*TraServiceRequest_SubscribeXafiRequest); ok {
		return x.SubscribeXafiRequest
	}
	return nil
}

type isTraServiceRequest_Request interface {
	isTraServiceRequest_Request()
}

type TraServiceRequest_CreateLskpmcRequest struct {
	CreateLskpmcRequest *CreateLskpmcRequest `protobuf:"bytes,1,opt,name=create_lskpmc_request,json=createLskpmcRequest,proto3,oneof"`
}

type TraServiceRequest_UpdateLskpmcRequest struct {
	UpdateLskpmcRequest *UpdateLskpmcRequest `protobuf:"bytes,2,opt,name=update_lskpmc_request,json=updateLskpmcRequest,proto3,oneof"`
}

type TraServiceRequest_RetrieveLskpmcRequest struct {
	RetrieveLskpmcRequest *RetrieveLskpmcRequest `protobuf:"bytes,3,opt,name=retrieve_lskpmc_request,json=retrieveLskpmcRequest,proto3,oneof"`
}

type TraServiceRequest_DeleteLskpmcRequest struct {
	DeleteLskpmcRequest *DeleteLskpmcRequest `protobuf:"bytes,4,opt,name=delete_lskpmc_request,json=deleteLskpmcRequest,proto3,oneof"`
}

type TraServiceRequest_SubscribeLskpmcRequest struct {
	SubscribeLskpmcRequest *SubscribeLskpmcRequest `protobuf:"bytes,5,opt,name=subscribe_lskpmc_request,json=subscribeLskpmcRequest,proto3,oneof"`
}

type TraServiceRequest_CreateXafiRequest struct {
	CreateXafiRequest *CreateXafiRequest `protobuf:"bytes,6,opt,name=create_xafi_request,json=createXafiRequest,proto3,oneof"`
}

type TraServiceRequest_UpdateXafiRequest struct {
	UpdateXafiRequest *UpdateXafiRequest `protobuf:"bytes,7,opt,name=update_xafi_request,json=updateXafiRequest,proto3,oneof"`
}

type TraServiceRequest_RetrieveXafiRequest struct {
	RetrieveXafiRequest *RetrieveXafiRequest `protobuf:"bytes,8,opt,name=retrieve_xafi_request,json=retrieveXafiRequest,proto3,oneof"`
}

type TraServiceRequest_DeleteXafiRequest struct {
	DeleteXafiRequest *DeleteXafiRequest `protobuf:"bytes,9,opt,name=delete_xafi_request,json=deleteXafiRequest,proto3,oneof"`
}

type TraServiceRequest_SubscribeXafiRequest struct {
	SubscribeXafiRequest *SubscribeXafiRequest `protobuf:"bytes,10,opt,name=subscribe_xafi_request,json=subscribeXafiRequest,proto3,oneof"`
}

func (*TraServiceRequest_CreateLskpmcRequest) isTraServiceRequest_Request() {}

func (*TraServiceRequest_UpdateLskpmcRequest) isTraServiceRequest_Request() {}

func (*TraServiceRequest_RetrieveLskpmcRequest) isTraServiceRequest_Request() {}

func (*TraServiceRequest_DeleteLskpmcRequest) isTraServiceRequest_Request() {}

func (*TraServiceRequest_SubscribeLskpmcRequest) isTraServiceRequest_Request() {}

func (*TraServiceRequest_CreateXafiRequest) isTraServiceRequest_Request() {}

func (*TraServiceRequest_UpdateXafiRequest) isTraServiceRequest_Request() {}

func (*TraServiceRequest_RetrieveXafiRequest) isTraServiceRequest_Request() {}

func (*TraServiceRequest_DeleteXafiRequest) isTraServiceRequest_Request() {}

func (*TraServiceRequest_SubscribeXafiRequest) isTraServiceRequest_Request() {}

type TraServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Types that are assignable to Response:
	//	*TraServiceResponse_CreateLskpmcResponse
	//	*TraServiceResponse_UpdateLskpmcResponse
	//	*TraServiceResponse_RetrieveLskpmcResponse
	//	*TraServiceResponse_DeleteLskpmcResponse
	//	*TraServiceResponse_SubscribeLskpmcResponse
	//	*TraServiceResponse_CreateXafiResponse
	//	*TraServiceResponse_UpdateXafiResponse
	//	*TraServiceResponse_RetrieveXafiResponse
	//	*TraServiceResponse_DeleteXafiResponse
	//	*TraServiceResponse_SubscribeXafiResponse
	Response isTraServiceResponse_Response `protobuf_oneof:"response"`
}

func (x *TraServiceResponse) Reset() {
	*x = TraServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraServiceResponse) ProtoMessage() {}

func (x *TraServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraServiceResponse.ProtoReflect.Descriptor instead.
func (*TraServiceResponse) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{2}
}

func (x *TraServiceResponse) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *TraServiceResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (m *TraServiceResponse) GetResponse() isTraServiceResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *TraServiceResponse) GetCreateLskpmcResponse() *CreateLskpmcResponse {
	if x, ok := x.GetResponse().(*TraServiceResponse_CreateLskpmcResponse); ok {
		return x.CreateLskpmcResponse
	}
	return nil
}

func (x *TraServiceResponse) GetUpdateLskpmcResponse() *UpdateLskpmcResponse {
	if x, ok := x.GetResponse().(*TraServiceResponse_UpdateLskpmcResponse); ok {
		return x.UpdateLskpmcResponse
	}
	return nil
}

func (x *TraServiceResponse) GetRetrieveLskpmcResponse() *RetrieveLskpmcResponse {
	if x, ok := x.GetResponse().(*TraServiceResponse_RetrieveLskpmcResponse); ok {
		return x.RetrieveLskpmcResponse
	}
	return nil
}

func (x *TraServiceResponse) GetDeleteLskpmcResponse() *DeleteLskpmcResponse {
	if x, ok := x.GetResponse().(*TraServiceResponse_DeleteLskpmcResponse); ok {
		return x.DeleteLskpmcResponse
	}
	return nil
}

func (x *TraServiceResponse) GetSubscribeLskpmcResponse() *SubscribeLskpmcResponse {
	if x, ok := x.GetResponse().(*TraServiceResponse_SubscribeLskpmcResponse); ok {
		return x.SubscribeLskpmcResponse
	}
	return nil
}

func (x *TraServiceResponse) GetCreateXafiResponse() *CreateXafiResponse {
	if x, ok := x.GetResponse().(*TraServiceResponse_CreateXafiResponse); ok {
		return x.CreateXafiResponse
	}
	return nil
}

func (x *TraServiceResponse) GetUpdateXafiResponse() *UpdateXafiResponse {
	if x, ok := x.GetResponse().(*TraServiceResponse_UpdateXafiResponse); ok {
		return x.UpdateXafiResponse
	}
	return nil
}

func (x *TraServiceResponse) GetRetrieveXafiResponse() *RetrieveXafiResponse {
	if x, ok := x.GetResponse().(*TraServiceResponse_RetrieveXafiResponse); ok {
		return x.RetrieveXafiResponse
	}
	return nil
}

func (x *TraServiceResponse) GetDeleteXafiResponse() *DeleteXafiResponse {
	if x, ok := x.GetResponse().(*TraServiceResponse_DeleteXafiResponse); ok {
		return x.DeleteXafiResponse
	}
	return nil
}

func (x *TraServiceResponse) GetSubscribeXafiResponse() *SubscribeXafiResponse {
	if x, ok := x.GetResponse().(*TraServiceResponse_SubscribeXafiResponse); ok {
		return x.SubscribeXafiResponse
	}
	return nil
}

type isTraServiceResponse_Response interface {
	isTraServiceResponse_Response()
}

type TraServiceResponse_CreateLskpmcResponse struct {
	CreateLskpmcResponse *CreateLskpmcResponse `protobuf:"bytes,3,opt,name=create_lskpmc_response,json=createLskpmcResponse,proto3,oneof"`
}

type TraServiceResponse_UpdateLskpmcResponse struct {
	UpdateLskpmcResponse *UpdateLskpmcResponse `protobuf:"bytes,4,opt,name=update_lskpmc_response,json=updateLskpmcResponse,proto3,oneof"`
}

type TraServiceResponse_RetrieveLskpmcResponse struct {
	RetrieveLskpmcResponse *RetrieveLskpmcResponse `protobuf:"bytes,5,opt,name=retrieve_lskpmc_response,json=retrieveLskpmcResponse,proto3,oneof"`
}

type TraServiceResponse_DeleteLskpmcResponse struct {
	DeleteLskpmcResponse *DeleteLskpmcResponse `protobuf:"bytes,6,opt,name=delete_lskpmc_response,json=deleteLskpmcResponse,proto3,oneof"`
}

type TraServiceResponse_SubscribeLskpmcResponse struct {
	SubscribeLskpmcResponse *SubscribeLskpmcResponse `protobuf:"bytes,7,opt,name=subscribe_lskpmc_response,json=subscribeLskpmcResponse,proto3,oneof"`
}

type TraServiceResponse_CreateXafiResponse struct {
	CreateXafiResponse *CreateXafiResponse `protobuf:"bytes,8,opt,name=create_xafi_response,json=createXafiResponse,proto3,oneof"`
}

type TraServiceResponse_UpdateXafiResponse struct {
	UpdateXafiResponse *UpdateXafiResponse `protobuf:"bytes,9,opt,name=update_xafi_response,json=updateXafiResponse,proto3,oneof"`
}

type TraServiceResponse_RetrieveXafiResponse struct {
	RetrieveXafiResponse *RetrieveXafiResponse `protobuf:"bytes,10,opt,name=retrieve_xafi_response,json=retrieveXafiResponse,proto3,oneof"`
}

type TraServiceResponse_DeleteXafiResponse struct {
	DeleteXafiResponse *DeleteXafiResponse `protobuf:"bytes,11,opt,name=delete_xafi_response,json=deleteXafiResponse,proto3,oneof"`
}

type TraServiceResponse_SubscribeXafiResponse struct {
	SubscribeXafiResponse *SubscribeXafiResponse `protobuf:"bytes,12,opt,name=subscribe_xafi_response,json=subscribeXafiResponse,proto3,oneof"`
}

func (*TraServiceResponse_CreateLskpmcResponse) isTraServiceResponse_Response() {}

func (*TraServiceResponse_UpdateLskpmcResponse) isTraServiceResponse_Response() {}

func (*TraServiceResponse_RetrieveLskpmcResponse) isTraServiceResponse_Response() {}

func (*TraServiceResponse_DeleteLskpmcResponse) isTraServiceResponse_Response() {}

func (*TraServiceResponse_SubscribeLskpmcResponse) isTraServiceResponse_Response() {}

func (*TraServiceResponse_CreateXafiResponse) isTraServiceResponse_Response() {}

func (*TraServiceResponse_UpdateXafiResponse) isTraServiceResponse_Response() {}

func (*TraServiceResponse_RetrieveXafiResponse) isTraServiceResponse_Response() {}

func (*TraServiceResponse_DeleteXafiResponse) isTraServiceResponse_Response() {}

func (*TraServiceResponse_SubscribeXafiResponse) isTraServiceResponse_Response() {}

type CreateLskpmcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lskpmcs map[string]string `protobuf:"bytes,1,rep,name=lskpmcs,proto3" json:"lskpmcs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateLskpmcRequest) Reset() {
	*x = CreateLskpmcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLskpmcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLskpmcRequest) ProtoMessage() {}

func (x *CreateLskpmcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLskpmcRequest.ProtoReflect.Descriptor instead.
func (*CreateLskpmcRequest) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{3}
}

func (x *CreateLskpmcRequest) GetLskpmcs() map[string]string {
	if x != nil {
		return x.Lskpmcs
	}
	return nil
}

type CreateLskpmcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateLskpmcResponse) Reset() {
	*x = CreateLskpmcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLskpmcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLskpmcResponse) ProtoMessage() {}

func (x *CreateLskpmcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLskpmcResponse.ProtoReflect.Descriptor instead.
func (*CreateLskpmcResponse) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{4}
}

type UpdateLskpmcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lskpmcs map[string]string `protobuf:"bytes,1,rep,name=lskpmcs,proto3" json:"lskpmcs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateLskpmcRequest) Reset() {
	*x = UpdateLskpmcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLskpmcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLskpmcRequest) ProtoMessage() {}

func (x *UpdateLskpmcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLskpmcRequest.ProtoReflect.Descriptor instead.
func (*UpdateLskpmcRequest) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateLskpmcRequest) GetLskpmcs() map[string]string {
	if x != nil {
		return x.Lskpmcs
	}
	return nil
}

type UpdateLskpmcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateLskpmcResponse) Reset() {
	*x = UpdateLskpmcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLskpmcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLskpmcResponse) ProtoMessage() {}

func (x *UpdateLskpmcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLskpmcResponse.ProtoReflect.Descriptor instead.
func (*UpdateLskpmcResponse) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{6}
}

type RetrieveLskpmcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lskpmc string `protobuf:"bytes,1,opt,name=lskpmc,proto3" json:"lskpmc,omitempty"`
}

func (x *RetrieveLskpmcRequest) Reset() {
	*x = RetrieveLskpmcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveLskpmcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveLskpmcRequest) ProtoMessage() {}

func (x *RetrieveLskpmcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveLskpmcRequest.ProtoReflect.Descriptor instead.
func (*RetrieveLskpmcRequest) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{7}
}

func (x *RetrieveLskpmcRequest) GetLskpmc() string {
	if x != nil {
		return x.Lskpmc
	}
	return ""
}

type RetrieveLskpmcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lskpmcs map[string]string `protobuf:"bytes,1,rep,name=lskpmcs,proto3" json:"lskpmcs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RetrieveLskpmcResponse) Reset() {
	*x = RetrieveLskpmcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveLskpmcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveLskpmcResponse) ProtoMessage() {}

func (x *RetrieveLskpmcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveLskpmcResponse.ProtoReflect.Descriptor instead.
func (*RetrieveLskpmcResponse) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{8}
}

func (x *RetrieveLskpmcResponse) GetLskpmcs() map[string]string {
	if x != nil {
		return x.Lskpmcs
	}
	return nil
}

type DeleteLskpmcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lskpmc string `protobuf:"bytes,1,opt,name=lskpmc,proto3" json:"lskpmc,omitempty"`
}

func (x *DeleteLskpmcRequest) Reset() {
	*x = DeleteLskpmcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLskpmcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLskpmcRequest) ProtoMessage() {}

func (x *DeleteLskpmcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLskpmcRequest.ProtoReflect.Descriptor instead.
func (*DeleteLskpmcRequest) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteLskpmcRequest) GetLskpmc() string {
	if x != nil {
		return x.Lskpmc
	}
	return ""
}

type DeleteLskpmcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteLskpmcResponse) Reset() {
	*x = DeleteLskpmcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLskpmcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLskpmcResponse) ProtoMessage() {}

func (x *DeleteLskpmcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLskpmcResponse.ProtoReflect.Descriptor instead.
func (*DeleteLskpmcResponse) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{10}
}

type SubscribeLskpmcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeLskpmcRequest) Reset() {
	*x = SubscribeLskpmcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeLskpmcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLskpmcRequest) ProtoMessage() {}

func (x *SubscribeLskpmcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLskpmcRequest.ProtoReflect.Descriptor instead.
func (*SubscribeLskpmcRequest) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{11}
}

type SubscribeLskpmcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lskpmcs map[string]string `protobuf:"bytes,1,rep,name=lskpmcs,proto3" json:"lskpmcs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubscribeLskpmcResponse) Reset() {
	*x = SubscribeLskpmcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeLskpmcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLskpmcResponse) ProtoMessage() {}

func (x *SubscribeLskpmcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLskpmcResponse.ProtoReflect.Descriptor instead.
func (*SubscribeLskpmcResponse) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{12}
}

func (x *SubscribeLskpmcResponse) GetLskpmcs() map[string]string {
	if x != nil {
		return x.Lskpmcs
	}
	return nil
}

type CreateXafiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xafis map[string]string `protobuf:"bytes,1,rep,name=xafis,proto3" json:"xafis,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateXafiRequest) Reset() {
	*x = CreateXafiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateXafiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateXafiRequest) ProtoMessage() {}

func (x *CreateXafiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateXafiRequest.ProtoReflect.Descriptor instead.
func (*CreateXafiRequest) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{13}
}

func (x *CreateXafiRequest) GetXafis() map[string]string {
	if x != nil {
		return x.Xafis
	}
	return nil
}

type CreateXafiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateXafiResponse) Reset() {
	*x = CreateXafiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateXafiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateXafiResponse) ProtoMessage() {}

func (x *CreateXafiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateXafiResponse.ProtoReflect.Descriptor instead.
func (*CreateXafiResponse) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{14}
}

type UpdateXafiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xafis map[string]string `protobuf:"bytes,1,rep,name=xafis,proto3" json:"xafis,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateXafiRequest) Reset() {
	*x = UpdateXafiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateXafiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateXafiRequest) ProtoMessage() {}

func (x *UpdateXafiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateXafiRequest.ProtoReflect.Descriptor instead.
func (*UpdateXafiRequest) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateXafiRequest) GetXafis() map[string]string {
	if x != nil {
		return x.Xafis
	}
	return nil
}

type UpdateXafiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateXafiResponse) Reset() {
	*x = UpdateXafiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateXafiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateXafiResponse) ProtoMessage() {}

func (x *UpdateXafiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateXafiResponse.ProtoReflect.Descriptor instead.
func (*UpdateXafiResponse) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{16}
}

type RetrieveXafiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xafi string `protobuf:"bytes,1,opt,name=xafi,proto3" json:"xafi,omitempty"`
}

func (x *RetrieveXafiRequest) Reset() {
	*x = RetrieveXafiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveXafiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveXafiRequest) ProtoMessage() {}

func (x *RetrieveXafiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveXafiRequest.ProtoReflect.Descriptor instead.
func (*RetrieveXafiRequest) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{17}
}

func (x *RetrieveXafiRequest) GetXafi() string {
	if x != nil {
		return x.Xafi
	}
	return ""
}

type RetrieveXafiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xafis map[string]string `protobuf:"bytes,1,rep,name=xafis,proto3" json:"xafis,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RetrieveXafiResponse) Reset() {
	*x = RetrieveXafiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveXafiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveXafiResponse) ProtoMessage() {}

func (x *RetrieveXafiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveXafiResponse.ProtoReflect.Descriptor instead.
func (*RetrieveXafiResponse) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{18}
}

func (x *RetrieveXafiResponse) GetXafis() map[string]string {
	if x != nil {
		return x.Xafis
	}
	return nil
}

type DeleteXafiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xafi string `protobuf:"bytes,1,opt,name=xafi,proto3" json:"xafi,omitempty"`
}

func (x *DeleteXafiRequest) Reset() {
	*x = DeleteXafiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteXafiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteXafiRequest) ProtoMessage() {}

func (x *DeleteXafiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteXafiRequest.ProtoReflect.Descriptor instead.
func (*DeleteXafiRequest) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteXafiRequest) GetXafi() string {
	if x != nil {
		return x.Xafi
	}
	return ""
}

type DeleteXafiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteXafiResponse) Reset() {
	*x = DeleteXafiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteXafiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteXafiResponse) ProtoMessage() {}

func (x *DeleteXafiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteXafiResponse.ProtoReflect.Descriptor instead.
func (*DeleteXafiResponse) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{20}
}

type SubscribeXafiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeXafiRequest) Reset() {
	*x = SubscribeXafiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeXafiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeXafiRequest) ProtoMessage() {}

func (x *SubscribeXafiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeXafiRequest.ProtoReflect.Descriptor instead.
func (*SubscribeXafiRequest) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{21}
}

type SubscribeXafiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xafis map[string]string `protobuf:"bytes,1,rep,name=xafis,proto3" json:"xafis,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SubscribeXafiResponse) Reset() {
	*x = SubscribeXafiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeXafiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeXafiResponse) ProtoMessage() {}

func (x *SubscribeXafiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeXafiResponse.ProtoReflect.Descriptor instead.
func (*SubscribeXafiResponse) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP(), []int{22}
}

func (x *SubscribeXafiResponse) GetXafis() map[string]string {
	if x != nil {
		return x.Xafis
	}
	return nil
}

var File_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto protoreflect.FileDescriptor

var file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x74, 0x72, 0x61,
	0x2f, 0x76, 0x33, 0x2f, 0x74, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x31, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33,
	0x1a, 0x28, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x64,
	0x70, 0x61, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x75, 0x64, 0x70,
	0x61, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7,
	0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x0c, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33,
	0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x13,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x8c, 0x0a, 0x0a, 0x11, 0x54, 0x72, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7c,
	0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76,
	0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x15,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73,
	0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x73, 0x6b,
	0x70, 0x6d, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x5f, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x7c, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e,
	0x76, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x85, 0x01,
	0x0a, 0x18, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x6c, 0x73, 0x6b, 0x70,
	0x6d, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72,
	0x61, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x73,
	0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x78, 0x61, 0x66, 0x69, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x61, 0x66,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a,
	0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x78, 0x61, 0x66, 0x69, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x5f, 0x78, 0x61, 0x66, 0x69, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x78, 0x61,
	0x66, 0x69, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72,
	0x61, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7f, 0x0a, 0x16, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x78, 0x61, 0x66, 0x69, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73,
	0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd7, 0x0a, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x16, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x73, 0x6b, 0x70,
	0x6d, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x5f, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76,
	0x33, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7f, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6c, 0x73, 0x6b,
	0x70, 0x6d, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x73, 0x6b,
	0x70, 0x6d, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x19, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x5f, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79,
	0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x78, 0x61, 0x66, 0x69, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x61, 0x66,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x14, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x78, 0x61, 0x66, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x16, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x5f, 0x78, 0x61, 0x66, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x14, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x78, 0x61, 0x66, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x58, 0x61,
	0x66, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x82, 0x01, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x78,
	0x61, 0x66, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc0, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x73, 0x6b, 0x70,
	0x6d, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x07, 0x6c, 0x73, 0x6b,
	0x70, 0x6d, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4c, 0x73, 0x6b, 0x70,
	0x6d, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x73,
	0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x01, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x07, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x73,
	0x6b, 0x70, 0x6d, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6c, 0x73, 0x6b, 0x70,
	0x6d, 0x63, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x16, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x22, 0xc6, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x07, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6c, 0x73,
	0x6b, 0x70, 0x6d, 0x63, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x2d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x73, 0x6b, 0x70,
	0x6d, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63,
	0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71,
	0x0a, 0x07, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x57, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61,
	0x2e, 0x76, 0x33, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x73, 0x6b,
	0x70, 0x6d, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x73, 0x6b, 0x70,
	0x6d, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6c, 0x73, 0x6b, 0x70, 0x6d, 0x63,
	0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x05, 0x78, 0x61, 0x66, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x61, 0x66,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x58, 0x61, 0x66, 0x69, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x78, 0x61, 0x66, 0x69, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x58, 0x61,
	0x66, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x61,
	0x66, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x65, 0x0a, 0x05, 0x78, 0x61, 0x66, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61,
	0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x58, 0x61, 0x66, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x78, 0x61, 0x66, 0x69, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x58, 0x61, 0x66, 0x69, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x78, 0x61, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x78, 0x61,
	0x66, 0x69, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x58,
	0x61, 0x66, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x05, 0x78,
	0x61, 0x66, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x58, 0x61, 0x66, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x78, 0x61, 0x66, 0x69, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x58, 0x61, 0x66, 0x69, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x27, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x61, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x78, 0x61, 0x66, 0x69, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16,
	0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x58, 0x61, 0x66, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x69, 0x0a, 0x05, 0x78, 0x61, 0x66, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x53, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61,
	0x2e, 0x76, 0x33, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x58, 0x61, 0x66,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x58, 0x61, 0x66, 0x69, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x78, 0x61, 0x66, 0x69, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x58,
	0x61, 0x66, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xd0, 0x0c, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x73, 0x6b, 0x70, 0x6d, 0x63, 0x12, 0x44, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73,
	0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e,
	0x54, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x73, 0x6b, 0x70, 0x6d, 0x63, 0x12, 0x44, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73,
	0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e,
	0x54, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x12, 0x44, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76,
	0x33, 0x2e, 0x54, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x12, 0x44, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76,
	0x33, 0x2e, 0x54, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4c, 0x73, 0x6b, 0x70, 0x6d, 0x63, 0x12, 0x44, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x54,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x45, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72,
	0x61, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x9b, 0x01, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x12, 0x44, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x54,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x45, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72,
	0x61, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x12, 0x44, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e,
	0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x58, 0x61, 0x66, 0x69, 0x12, 0x44, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e,
	0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x58, 0x61, 0x66, 0x69, 0x12, 0x44, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33,
	0x2e, 0x54, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa0, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x58, 0x61, 0x66, 0x69, 0x12, 0x44, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76,
	0x33, 0x2e, 0x54, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x55, 0x0a, 0x3f, 0x69, 0x6f, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x69, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x72, 0x61, 0x2e, 0x76, 0x33, 0x42, 0x08, 0x54, 0x72, 0x61,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0xba, 0x80, 0xc8, 0xd1, 0x06, 0x02, 0x10, 0x02, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescOnce sync.Once
	file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescData = file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDesc
)

func file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescGZIP() []byte {
	file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescData = protoimpl.X.CompressGZIP(file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescData)
	})
	return file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDescData
}

var file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_goTypes = []interface{}{
	(*TraServiceConfig)(nil),        // 0: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceConfig
	(*TraServiceRequest)(nil),       // 1: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest
	(*TraServiceResponse)(nil),      // 2: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse
	(*CreateLskpmcRequest)(nil),     // 3: envoy.extensions.filters.network.sip_proxy.tra.v3.CreateLskpmcRequest
	(*CreateLskpmcResponse)(nil),    // 4: envoy.extensions.filters.network.sip_proxy.tra.v3.CreateLskpmcResponse
	(*UpdateLskpmcRequest)(nil),     // 5: envoy.extensions.filters.network.sip_proxy.tra.v3.UpdateLskpmcRequest
	(*UpdateLskpmcResponse)(nil),    // 6: envoy.extensions.filters.network.sip_proxy.tra.v3.UpdateLskpmcResponse
	(*RetrieveLskpmcRequest)(nil),   // 7: envoy.extensions.filters.network.sip_proxy.tra.v3.RetrieveLskpmcRequest
	(*RetrieveLskpmcResponse)(nil),  // 8: envoy.extensions.filters.network.sip_proxy.tra.v3.RetrieveLskpmcResponse
	(*DeleteLskpmcRequest)(nil),     // 9: envoy.extensions.filters.network.sip_proxy.tra.v3.DeleteLskpmcRequest
	(*DeleteLskpmcResponse)(nil),    // 10: envoy.extensions.filters.network.sip_proxy.tra.v3.DeleteLskpmcResponse
	(*SubscribeLskpmcRequest)(nil),  // 11: envoy.extensions.filters.network.sip_proxy.tra.v3.SubscribeLskpmcRequest
	(*SubscribeLskpmcResponse)(nil), // 12: envoy.extensions.filters.network.sip_proxy.tra.v3.SubscribeLskpmcResponse
	(*CreateXafiRequest)(nil),       // 13: envoy.extensions.filters.network.sip_proxy.tra.v3.CreateXafiRequest
	(*CreateXafiResponse)(nil),      // 14: envoy.extensions.filters.network.sip_proxy.tra.v3.CreateXafiResponse
	(*UpdateXafiRequest)(nil),       // 15: envoy.extensions.filters.network.sip_proxy.tra.v3.UpdateXafiRequest
	(*UpdateXafiResponse)(nil),      // 16: envoy.extensions.filters.network.sip_proxy.tra.v3.UpdateXafiResponse
	(*RetrieveXafiRequest)(nil),     // 17: envoy.extensions.filters.network.sip_proxy.tra.v3.RetrieveXafiRequest
	(*RetrieveXafiResponse)(nil),    // 18: envoy.extensions.filters.network.sip_proxy.tra.v3.RetrieveXafiResponse
	(*DeleteXafiRequest)(nil),       // 19: envoy.extensions.filters.network.sip_proxy.tra.v3.DeleteXafiRequest
	(*DeleteXafiResponse)(nil),      // 20: envoy.extensions.filters.network.sip_proxy.tra.v3.DeleteXafiResponse
	(*SubscribeXafiRequest)(nil),    // 21: envoy.extensions.filters.network.sip_proxy.tra.v3.SubscribeXafiRequest
	(*SubscribeXafiResponse)(nil),   // 22: envoy.extensions.filters.network.sip_proxy.tra.v3.SubscribeXafiResponse
	nil,                             // 23: envoy.extensions.filters.network.sip_proxy.tra.v3.CreateLskpmcRequest.LskpmcsEntry
	nil,                             // 24: envoy.extensions.filters.network.sip_proxy.tra.v3.UpdateLskpmcRequest.LskpmcsEntry
	nil,                             // 25: envoy.extensions.filters.network.sip_proxy.tra.v3.RetrieveLskpmcResponse.LskpmcsEntry
	nil,                             // 26: envoy.extensions.filters.network.sip_proxy.tra.v3.SubscribeLskpmcResponse.LskpmcsEntry
	nil,                             // 27: envoy.extensions.filters.network.sip_proxy.tra.v3.CreateXafiRequest.XafisEntry
	nil,                             // 28: envoy.extensions.filters.network.sip_proxy.tra.v3.UpdateXafiRequest.XafisEntry
	nil,                             // 29: envoy.extensions.filters.network.sip_proxy.tra.v3.RetrieveXafiResponse.XafisEntry
	nil,                             // 30: envoy.extensions.filters.network.sip_proxy.tra.v3.SubscribeXafiResponse.XafisEntry
	(*v3.GrpcService)(nil),          // 31: envoy.config.core.v3.GrpcService
	(v3.ApiVersion)(0),              // 32: envoy.config.core.v3.ApiVersion
	(*duration.Duration)(nil),       // 33: google.protobuf.Duration
}
var file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_depIdxs = []int32{
	31, // 0: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceConfig.grpc_service:type_name -> envoy.config.core.v3.GrpcService
	32, // 1: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceConfig.transport_api_version:type_name -> envoy.config.core.v3.ApiVersion
	33, // 2: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceConfig.timeout:type_name -> google.protobuf.Duration
	3,  // 3: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest.create_lskpmc_request:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.CreateLskpmcRequest
	5,  // 4: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest.update_lskpmc_request:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.UpdateLskpmcRequest
	7,  // 5: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest.retrieve_lskpmc_request:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.RetrieveLskpmcRequest
	9,  // 6: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest.delete_lskpmc_request:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.DeleteLskpmcRequest
	11, // 7: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest.subscribe_lskpmc_request:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.SubscribeLskpmcRequest
	13, // 8: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest.create_xafi_request:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.CreateXafiRequest
	15, // 9: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest.update_xafi_request:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.UpdateXafiRequest
	17, // 10: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest.retrieve_xafi_request:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.RetrieveXafiRequest
	19, // 11: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest.delete_xafi_request:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.DeleteXafiRequest
	21, // 12: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest.subscribe_xafi_request:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.SubscribeXafiRequest
	4,  // 13: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse.create_lskpmc_response:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.CreateLskpmcResponse
	6,  // 14: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse.update_lskpmc_response:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.UpdateLskpmcResponse
	8,  // 15: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse.retrieve_lskpmc_response:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.RetrieveLskpmcResponse
	10, // 16: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse.delete_lskpmc_response:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.DeleteLskpmcResponse
	12, // 17: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse.subscribe_lskpmc_response:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.SubscribeLskpmcResponse
	14, // 18: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse.create_xafi_response:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.CreateXafiResponse
	16, // 19: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse.update_xafi_response:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.UpdateXafiResponse
	18, // 20: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse.retrieve_xafi_response:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.RetrieveXafiResponse
	20, // 21: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse.delete_xafi_response:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.DeleteXafiResponse
	22, // 22: envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse.subscribe_xafi_response:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.SubscribeXafiResponse
	23, // 23: envoy.extensions.filters.network.sip_proxy.tra.v3.CreateLskpmcRequest.lskpmcs:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.CreateLskpmcRequest.LskpmcsEntry
	24, // 24: envoy.extensions.filters.network.sip_proxy.tra.v3.UpdateLskpmcRequest.lskpmcs:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.UpdateLskpmcRequest.LskpmcsEntry
	25, // 25: envoy.extensions.filters.network.sip_proxy.tra.v3.RetrieveLskpmcResponse.lskpmcs:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.RetrieveLskpmcResponse.LskpmcsEntry
	26, // 26: envoy.extensions.filters.network.sip_proxy.tra.v3.SubscribeLskpmcResponse.lskpmcs:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.SubscribeLskpmcResponse.LskpmcsEntry
	27, // 27: envoy.extensions.filters.network.sip_proxy.tra.v3.CreateXafiRequest.xafis:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.CreateXafiRequest.XafisEntry
	28, // 28: envoy.extensions.filters.network.sip_proxy.tra.v3.UpdateXafiRequest.xafis:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.UpdateXafiRequest.XafisEntry
	29, // 29: envoy.extensions.filters.network.sip_proxy.tra.v3.RetrieveXafiResponse.xafis:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.RetrieveXafiResponse.XafisEntry
	30, // 30: envoy.extensions.filters.network.sip_proxy.tra.v3.SubscribeXafiResponse.xafis:type_name -> envoy.extensions.filters.network.sip_proxy.tra.v3.SubscribeXafiResponse.XafisEntry
	1,  // 31: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.CreateLskpmc:input_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest
	1,  // 32: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.UpdateLskpmc:input_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest
	1,  // 33: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.RetrieveLskpmc:input_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest
	1,  // 34: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.DeleteLskpmc:input_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest
	1,  // 35: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.SubscribeLskpmc:input_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest
	1,  // 36: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.CreateXafi:input_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest
	1,  // 37: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.UpdateXafi:input_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest
	1,  // 38: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.RetrieveXafi:input_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest
	1,  // 39: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.DeleteXafi:input_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest
	1,  // 40: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.SubscribeXafi:input_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceRequest
	2,  // 41: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.CreateLskpmc:output_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse
	2,  // 42: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.UpdateLskpmc:output_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse
	2,  // 43: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.RetrieveLskpmc:output_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse
	2,  // 44: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.DeleteLskpmc:output_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse
	2,  // 45: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.SubscribeLskpmc:output_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse
	2,  // 46: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.CreateXafi:output_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse
	2,  // 47: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.UpdateXafi:output_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse
	2,  // 48: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.RetrieveXafi:output_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse
	2,  // 49: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.DeleteXafi:output_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse
	2,  // 50: envoy.extensions.filters.network.sip_proxy.tra.v3.TraService.SubscribeXafi:output_type -> envoy.extensions.filters.network.sip_proxy.tra.v3.TraServiceResponse
	41, // [41:51] is the sub-list for method output_type
	31, // [31:41] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_init() }
func file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_init() {
	if File_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLskpmcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLskpmcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLskpmcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLskpmcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveLskpmcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveLskpmcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLskpmcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLskpmcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeLskpmcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeLskpmcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateXafiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateXafiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateXafiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateXafiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveXafiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveXafiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteXafiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteXafiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeXafiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeXafiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TraServiceRequest_CreateLskpmcRequest)(nil),
		(*TraServiceRequest_UpdateLskpmcRequest)(nil),
		(*TraServiceRequest_RetrieveLskpmcRequest)(nil),
		(*TraServiceRequest_DeleteLskpmcRequest)(nil),
		(*TraServiceRequest_SubscribeLskpmcRequest)(nil),
		(*TraServiceRequest_CreateXafiRequest)(nil),
		(*TraServiceRequest_UpdateXafiRequest)(nil),
		(*TraServiceRequest_RetrieveXafiRequest)(nil),
		(*TraServiceRequest_DeleteXafiRequest)(nil),
		(*TraServiceRequest_SubscribeXafiRequest)(nil),
	}
	file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*TraServiceResponse_CreateLskpmcResponse)(nil),
		(*TraServiceResponse_UpdateLskpmcResponse)(nil),
		(*TraServiceResponse_RetrieveLskpmcResponse)(nil),
		(*TraServiceResponse_DeleteLskpmcResponse)(nil),
		(*TraServiceResponse_SubscribeLskpmcResponse)(nil),
		(*TraServiceResponse_CreateXafiResponse)(nil),
		(*TraServiceResponse_UpdateXafiResponse)(nil),
		(*TraServiceResponse_RetrieveXafiResponse)(nil),
		(*TraServiceResponse_DeleteXafiResponse)(nil),
		(*TraServiceResponse_SubscribeXafiResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_msgTypes,
	}.Build()
	File_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto = out.File
	file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_rawDesc = nil
	file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_goTypes = nil
	file_envoy_extensions_filters_network_sip_proxy_tra_v3_tra_proto_depIdxs = nil
}
